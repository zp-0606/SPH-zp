{"ast":null,"code":"import _objectSpread from \"E:/VueProject/project-SPH/app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.string.split.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport SearchSelector from \"./SearchSelector/SearchSelector\";\nimport { mapGetters, mapState } from \"vuex\";\nexport default {\n  name: \"Search\",\n  data: function data() {\n    return {\n      searchParams: {\n        category3Id: \"\",\n        categoryName: \"\",\n        keyword: \"\",\n        order: \"1:asc\",\n        pageNo: 1,\n        pageSize: 10,\n        props: [],\n        trademark: \"\"\n      }\n    };\n  },\n  components: {\n    SearchSelector: SearchSelector\n  },\n  beforeMount: function beforeMount() {\n    Object.assign(this.searchParams, this.$route.query, this.$route.params);\n  },\n  mounted: function mounted() {\n    this.getData();\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"goodsList\"])), {}, {\n    isOne: function isOne() {\n      return this.searchParams.order.indexOf(1) != -1;\n    },\n    isTwo: function isTwo() {\n      return this.searchParams.order.indexOf(2) != -1;\n    },\n    isAsc: function isAsc() {\n      return this.searchParams.order.indexOf(\"asc\") != -1;\n    },\n    isDesc: function isDesc() {\n      return this.searchParams.order.indexOf(\"desc\") != -1;\n    }\n  }, mapState({\n    total: function total(state) {\n      return state.search.searchList.total;\n    }\n  })),\n  methods: {\n    getData: function getData() {\n      this.$store.dispatch(\"getSearchList\", this.searchParams);\n    },\n    removeCategoryName: function removeCategoryName() {\n      this.searchParams.categoryName = undefined;\n      this.searchParams.category1Id = undefined;\n      this.searchParams.category2Id = undefined;\n      this.searchParams.category3Id = undefined;\n      this.getData();\n\n      if (this.$route.params) {\n        this.$router.push({\n          name: \"search\",\n          params: this.$route.params\n        });\n      }\n    },\n    removeKeyword: function removeKeyword() {\n      this.searchParams.keyword = undefined;\n      this.getData();\n      this.$bus.$emit(\"clear\");\n\n      if (this.$route.query) {\n        this.$router.push({\n          name: \"search\",\n          query: this.$route.query\n        });\n      }\n    },\n    trademarkInfo: function trademarkInfo(trademark) {\n      this.searchParams.trademark = \"\".concat(trademark.tmId, \":\").concat(trademark.tmName);\n      this.getData();\n    },\n    removeTrademark: function removeTrademark() {\n      this.searchParams.trademark = undefined;\n      this.getData();\n    },\n    attrInfo: function attrInfo(attr, attrValue) {\n      var props = \"\".concat(attr.attrId, \":\").concat(attrValue, \":\").concat(attr.attrName);\n\n      if (this.searchParams.props.indexOf(props) == -1) {\n        this.searchParams.props.push(props);\n      }\n\n      this.getData();\n    },\n    removeAttr: function removeAttr(index) {\n      this.searchParams.props.splice(index, 1);\n      this.getData();\n    },\n    changeOrder: function changeOrder(flag) {\n      var originOrder = this.searchParams.order.split(\":\");\n      var originFlag = originOrder[0];\n      var originSort = originOrder[1];\n      var newOrder = \"\";\n\n      if (flag == originFlag) {\n        newOrder = \"\".concat(flag, \":\").concat(originSort == \"desc\" ? \"asc\" : \"desc\");\n      } else {\n        newOrder = \"\".concat(flag, \":\", \"desc\");\n      }\n\n      this.searchParams.order = newOrder;\n      this.getData();\n    },\n    getPageNo: function getPageNo(pageNo) {\n      this.searchParams.pageNo = pageNo;\n      this.getData();\n    }\n  },\n  watch: {\n    $route: function $route(newValue, oldValue) {\n      Object.assign(this.searchParams, this.$route.query, this.$route.params);\n      this.getData();\n      this.searchParams.category1Id = undefined;\n      this.searchParams.category2Id = undefined;\n      this.searchParams.category3Id = undefined;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}