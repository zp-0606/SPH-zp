{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { reqCartList, reqDeleteCartById, reqUpdateCheckedById } from \"@/api\";\nconst state = {\n  cartList: []\n};\nconst mutations = {\n  GETCARTLIST(state, cartList) {\n    state.cartList = cartList;\n  }\n\n};\nconst actions = {\n  async getCartList({\n    commit\n  }) {\n    let result = await reqCartList();\n\n    if (result.code == 200) {\n      commit('GETCARTLIST', result.data);\n    }\n  },\n\n  async deleteCartList({\n    commit\n  }, skuId) {\n    let result = await reqDeleteCartById(skuId);\n\n    if (result.code == 200) {\n      return 'ok';\n    } else {\n      return Promise.reject(new Error('faile'));\n    }\n  },\n\n  async updateCheckedById({\n    commit\n  }, {\n    skuId,\n    isChecked\n  }) {\n    let result = await reqUpdateCheckedById(skuId, isChecked);\n\n    if (result.code == 200) {\n      return 'ok';\n    } else {\n      return Promise.reject(new Error('faile'));\n    }\n  },\n\n  deleteAllCheckedCart({\n    getters,\n    dispatch\n  }) {\n    let PromiseAll = [];\n    getters.cartInfo.cartInfoList.forEach(cart => {\n      let Promise = cart.isChecked == 1 ? dispatch('deleteCartList', cart.skuId) : '';\n      PromiseAll.push(Promise);\n    });\n    return Promise.all(PromiseAll);\n  },\n\n  undateAllCartIsChecked({\n    state,\n    dispatch\n  }, isChecked) {\n    let PromiseAll = [];\n    state.cartList[0].cartInfoList.forEach(item => {\n      let result = dispatch('updateCheckedById', {\n        skuId: item.skuId,\n        isChecked\n      });\n      PromiseAll.push(result);\n    });\n    return Promise.all(PromiseAll);\n  }\n\n};\nconst getters = {\n  cartInfo(state) {\n    return state.cartList[0] || {};\n  }\n\n};\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"sources":["E:/VueProject/project-SPH/app/src/store/shopcart/index.js"],"names":["reqCartList","reqDeleteCartById","reqUpdateCheckedById","state","cartList","mutations","GETCARTLIST","actions","getCartList","commit","result","code","data","deleteCartList","skuId","Promise","reject","Error","updateCheckedById","isChecked","deleteAllCheckedCart","getters","dispatch","PromiseAll","cartInfo","cartInfoList","forEach","cart","push","all","undateAllCartIsChecked","item"],"mappings":"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","sourcesContent":["import { reqCartList, reqDeleteCartById, reqUpdateCheckedById } from \"@/api\"\r\nconst state = {\r\n    cartList: []\r\n}\r\nconst mutations = {\r\n    GETCARTLIST(state, cartList) {\r\n        state.cartList = cartList\r\n    }\r\n}\r\nconst actions = {\r\n    async getCartList({ commit }) {\r\n        let result = await reqCartList()\r\n        if (result.code == 200) {\r\n            commit('GETCARTLIST', result.data)\r\n        }\r\n    },\r\n    async deleteCartList({ commit }, skuId) {\r\n        let result = await reqDeleteCartById(skuId)\r\n        if (result.code == 200) {\r\n            return 'ok'\r\n        } else {\r\n            return Promise.reject(new Error('faile'))\r\n        }\r\n    },\r\n    async updateCheckedById({ commit }, { skuId, isChecked }) {\r\n        let result = await reqUpdateCheckedById(skuId, isChecked)\r\n        if (result.code == 200) {\r\n            return 'ok'\r\n        } else {\r\n            return Promise.reject(new Error('faile'))\r\n        }\r\n    },\r\n    deleteAllCheckedCart({ getters, dispatch }) {\r\n        let PromiseAll = []\r\n        getters.cartInfo.cartInfoList.forEach(cart => {\r\n            let Promise = cart.isChecked == 1 ? dispatch('deleteCartList', cart.skuId) : ''\r\n            PromiseAll.push(Promise)\r\n        });\r\n        return Promise.all(PromiseAll)\r\n    },\r\n    undateAllCartIsChecked({ state, dispatch }, isChecked) {\r\n        let PromiseAll=[]\r\n        state.cartList[0].cartInfoList.forEach((item) => {\r\n            let result = dispatch('updateCheckedById', { skuId: item.skuId, isChecked })\r\n            PromiseAll.push(result)\r\n        })\r\n        return Promise.all(PromiseAll)\r\n    }\r\n\r\n}\r\nconst getters = {\r\n    cartInfo(state) {\r\n        return state.cartList[0] || {}\r\n    }\r\n}\r\nexport default {\r\n    state, mutations, actions, getters\r\n}"]},"metadata":{},"sourceType":"module"}