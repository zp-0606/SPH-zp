{"ast":null,"code":"import _asyncToGenerator from \"E:/VueProject/project-SPH/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { reqCartList, reqDeleteCartById, reqUpdateCheckedById } from \"@/api\";\nvar state = {\n  cartList: []\n};\nvar mutations = {\n  GETCARTLIST: function GETCARTLIST(state, cartList) {\n    state.cartList = cartList;\n  }\n};\nvar actions = {\n  getCartList: function getCartList(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return reqCartList();\n\n            case 3:\n              result = _context.sent;\n\n              if (result.code == 200) {\n                commit('GETCARTLIST', result.data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  deleteCartList: function deleteCartList(_ref2, skuId) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context2.next = 3;\n              return reqDeleteCartById(skuId);\n\n            case 3:\n              result = _context2.sent;\n\n              if (!(result.code == 200)) {\n                _context2.next = 8;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", 'ok');\n\n            case 8:\n              return _context2.abrupt(\"return\", Promise.reject(new Error('faile')));\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  updateCheckedById: function updateCheckedById(_ref3, _ref4) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n      var commit, skuId, isChecked, result;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              skuId = _ref4.skuId, isChecked = _ref4.isChecked;\n              _context3.next = 4;\n              return reqUpdateCheckedById(skuId, isChecked);\n\n            case 4:\n              result = _context3.sent;\n\n              if (!(result.code == 200)) {\n                _context3.next = 9;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", 'ok');\n\n            case 9:\n              return _context3.abrupt(\"return\", Promise.reject(new Error('faile')));\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  deleteAllCheckedCart: function deleteAllCheckedCart(_ref5) {\n    var getters = _ref5.getters,\n        dispatch = _ref5.dispatch;\n    var PromiseAll = [];\n    getters.cartInfo.cartInfoList.forEach(function (cart) {\n      var Promise = cart.isChecked == 1 ? dispatch('deleteCartList', cart.skuId) : '';\n      PromiseAll.push(Promise);\n    });\n    return Promise.all(PromiseAll);\n  },\n  undateAllCartIsChecked: function undateAllCartIsChecked(_ref6, isChecked) {\n    var state = _ref6.state,\n        dispatch = _ref6.dispatch;\n    var PromiseAll = [];\n    state.cartList[0].cartInfoList.forEach(function (item) {\n      var reusul = dispatch('updateCheckedById', {\n        skuId: item.skuId,\n        isChecked: isChecked\n      });\n      PromiseAll.push(result);\n    });\n    return Promise.all(PromiseAll);\n  }\n};\nvar getters = {\n  cartInfo: function cartInfo(state) {\n    return state.cartList[0] || {};\n  }\n};\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};","map":{"version":3,"sources":["E:/VueProject/project-SPH/app/src/store/shopcart/index.js"],"names":["reqCartList","reqDeleteCartById","reqUpdateCheckedById","state","cartList","mutations","GETCARTLIST","actions","getCartList","commit","result","code","data","deleteCartList","skuId","Promise","reject","Error","updateCheckedById","isChecked","deleteAllCheckedCart","getters","dispatch","PromiseAll","cartInfo","cartInfoList","forEach","cart","push","all","undateAllCartIsChecked","item","reusul"],"mappings":"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","sourcesContent":["import { reqCartList, reqDeleteCartById, reqUpdateCheckedById } from \"@/api\"\r\nconst state = {\r\n    cartList: []\r\n}\r\nconst mutations = {\r\n    GETCARTLIST(state, cartList) {\r\n        state.cartList = cartList\r\n    }\r\n}\r\nconst actions = {\r\n    async getCartList({ commit }) {\r\n        let result = await reqCartList()\r\n        if (result.code == 200) {\r\n            commit('GETCARTLIST', result.data)\r\n        }\r\n    },\r\n    async deleteCartList({ commit }, skuId) {\r\n        let result = await reqDeleteCartById(skuId)\r\n        if (result.code == 200) {\r\n            return 'ok'\r\n        } else {\r\n            return Promise.reject(new Error('faile'))\r\n        }\r\n    },\r\n    async updateCheckedById({ commit }, { skuId, isChecked }) {\r\n        let result = await reqUpdateCheckedById(skuId, isChecked)\r\n        if (result.code == 200) {\r\n            return 'ok'\r\n        } else {\r\n            return Promise.reject(new Error('faile'))\r\n        }\r\n    },\r\n    deleteAllCheckedCart({ getters, dispatch }) {\r\n        let PromiseAll = []\r\n        getters.cartInfo.cartInfoList.forEach(cart => {\r\n            let Promise = cart.isChecked == 1 ? dispatch('deleteCartList', cart.skuId) : ''\r\n            PromiseAll.push(Promise)\r\n        });\r\n        return Promise.all(PromiseAll)\r\n    },\r\n    undateAllCartIsChecked({ state, dispatch }, isChecked) {\r\n        let PromiseAll=[]\r\n        state.cartList[0].cartInfoList.forEach((item) => {\r\n            let reusul = dispatch('updateCheckedById', { skuId: item.skuId, isChecked })\r\n            PromiseAll.push(result)\r\n        })\r\n        return Promise.all(PromiseAll)\r\n    }\r\n\r\n}\r\nconst getters = {\r\n    cartInfo(state) {\r\n        return state.cartList[0] || {}\r\n    }\r\n}\r\nexport default {\r\n    state, mutations, actions, getters\r\n}"]},"metadata":{},"sourceType":"module"}