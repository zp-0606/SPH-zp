{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport throttle from \"lodash/throttle\";\nimport { mapGetters } from \"vuex\";\nexport default {\n  name: \"ShopCart\",\n\n  mounted() {\n    this.getData();\n  },\n\n  methods: {\n    getData() {\n      this.$store.dispatch(\"getCartList\");\n    },\n\n    handler: throttle(async function (type, disNum, cart) {\n      switch (type) {\n        case \"add\":\n          disNum = 1;\n          break;\n\n        case \"minus\":\n          disNum = cart.skuNum > 1 ? -1 : 0;\n          break;\n\n        case \"change\":\n          if (isNaN(disNum) || disNum < 1) {\n            disNum = 0;\n          } else {\n            disNum = parseInt(disNum) - cart.skuNum;\n          }\n\n          break;\n      }\n\n      try {\n        await this.$store.dispatch(\"addOrUpdateShopCart\", {\n          skuId: cart.skuId,\n          skuNum: disNum\n        });\n        this.getData();\n      } catch (error) {\n        alert(error.message);\n      }\n    }, 500),\n\n    async deleteCartById(cart) {\n      try {\n        await this.$store.dispatch(\"deleteCartList\", cart.skuId);\n        this.getData();\n      } catch (error) {\n        alert(error.message);\n      }\n    },\n\n    async updateCheckedById(cart, event) {\n      try {\n        let isChecked = event.target.checked ? \"1\" : \"0\";\n        await this.$store.dispatch(\"updateCheckedById\", {\n          skuId: cart.skuId,\n          isChecked\n        });\n        this.getData();\n      } catch (error) {\n        alert(error.message);\n      }\n    },\n\n    async deleteAllCheckedCart() {\n      try {\n        await this.$store.dispatch(\"deleteAllCheckedCart\");\n        this.getData();\n      } catch (error) {\n        alert(error.message);\n      }\n    },\n\n    async undateAllCartIsChecked(event) {\n      try {\n        let isChecked = event.target.checked ? '1' : '0';\n        await this.$store.dispatch('undateAllCartIsChecked', isChecked);\n        this.getData();\n      } catch (error) {\n        alert(error.message);\n      }\n    }\n\n  },\n  computed: { ...mapGetters([\"cartInfo\"]),\n\n    cartInfoList() {\n      return this.cartInfo.cartInfoList || [];\n    },\n\n    totalPrice() {\n      let num = 0;\n      let checkedCart = this.cartInfoList.filter(item => item.isChecked == 1);\n      checkedCart.forEach(element => {\n        num += element.skuPrice * element.skuNum;\n      });\n      return num;\n    },\n\n    isAllCheck() {\n      return this.cartInfoList.every(item => item.isChecked == 1);\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}