{"ast":null,"code":"import _asyncToGenerator from \"E:/VueProject/project-SPH/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { reqCartList, reqDeleteCartById, reqUpdateCheckedById } from \"@/api\";\nvar state = {\n  cartList: []\n};\nvar mutations = {\n  GETCARTLIST: function GETCARTLIST(state, cartList) {\n    state.cartList = cartList;\n  }\n};\nvar actions = {\n  getCartList: function getCartList(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return reqCartList();\n\n            case 3:\n              result = _context.sent;\n\n              if (result.code == 200) {\n                commit('GETCARTLIST', result.data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  deleteCartList: function deleteCartList(_ref2, skuId) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context2.next = 3;\n              return reqDeleteCartById(skuId);\n\n            case 3:\n              result = _context2.sent;\n\n              if (!(result.code == 200)) {\n                _context2.next = 8;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", 'ok');\n\n            case 8:\n              return _context2.abrupt(\"return\", Promise.reject(new Error('faile')));\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  updateCheckedById: function updateCheckedById(_ref3, _ref4) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n      var commit, skuId, isChecked, result;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              skuId = _ref4.skuId, isChecked = _ref4.isChecked;\n              _context3.next = 4;\n              return reqUpdateCheckedById(skuId, isChecked);\n\n            case 4:\n              result = _context3.sent;\n\n              if (!(result.code == 200)) {\n                _context3.next = 9;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", 'ok');\n\n            case 9:\n              return _context3.abrupt(\"return\", Promise.reject(new Error('faile')));\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  deleteAllCheckedCart: function deleteAllCheckedCart(_ref5) {\n    var getters = _ref5.getters,\n        dispatch = _ref5.dispatch;\n    getters.cartInfo.cartInfoList.forEach(function (cart) {\n      if (cart.isChecked == 1) {\n        dispatch('deleteCartList', cart.skuId);\n      }\n\n      cart.isChecked;\n    });\n  }\n};\nvar getters = {\n  cartInfo: function cartInfo(state) {\n    return state.cartList[0] || {};\n  }\n};\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};","map":{"version":3,"sources":["E:/VueProject/project-SPH/app/src/store/shopcart/index.js"],"names":["reqCartList","reqDeleteCartById","reqUpdateCheckedById","state","cartList","mutations","GETCARTLIST","actions","getCartList","commit","result","code","data","deleteCartList","skuId","Promise","reject","Error","updateCheckedById","isChecked","deleteAllCheckedCart","getters","dispatch","cartInfo","cartInfoList","forEach","cart"],"mappings":";;;;;AAAA,SAASA,WAAT,EAAqBC,iBAArB,EAAuCC,oBAAvC,QAAmE,OAAnE;AACA,IAAMC,KAAK,GAAG;AACVC,EAAAA,QAAQ,EAAC;AADC,CAAd;AAGA,IAAMC,SAAS,GAAG;AACdC,EAAAA,WADc,uBACFH,KADE,EACKC,QADL,EACe;AACzBD,IAAAA,KAAK,CAACC,QAAN,GAAeA,QAAf;AACJ;AAHc,CAAlB;AAKA,IAAMG,OAAO,GAAG;AACNC,EAAAA,WADM,6BACkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAVC,cAAAA,MAAU,QAAVA,MAAU;AAAA;AAAA,qBACPT,WAAW,EADJ;;AAAA;AACtBU,cAAAA,MADsB;;AAE1B,kBAAIA,MAAM,CAACC,IAAP,IAAe,GAAnB,EAAwB;AACpBF,gBAAAA,MAAM,CAAC,aAAD,EAAeC,MAAM,CAACE,IAAtB,CAAN;AACH;;AAJyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK7B,GANW;AAONC,EAAAA,cAPM,iCAOqBC,KAPrB,EAO4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAjBL,cAAAA,MAAiB,SAAjBA,MAAiB;AAAA;AAAA,qBACjBR,iBAAiB,CAACa,KAAD,CADA;;AAAA;AAChCJ,cAAAA,MADgC;;AAAA,oBAEhCA,MAAM,CAACC,IAAP,IAAe,GAFiB;AAAA;AAAA;AAAA;;AAAA,gDAGzB,IAHyB;;AAAA;AAAA,gDAKzBI,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,OAAV,CAAf,CALyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOvC,GAdW;AAeNC,EAAAA,iBAfM,2CAe8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAhCT,cAAAA,MAAgC,SAAhCA,MAAgC;AAApBK,cAAAA,KAAoB,SAApBA,KAAoB,EAAbK,SAAa,SAAbA,SAAa;AAAA;AAAA,qBACnCjB,oBAAoB,CAACY,KAAD,EAAQK,SAAR,CADe;;AAAA;AAClDT,cAAAA,MADkD;;AAAA,oBAElDA,MAAM,CAACC,IAAP,IAAe,GAFmC;AAAA;AAAA;AAAA;;AAAA,gDAG3C,IAH2C;;AAAA;AAAA,gDAK3CI,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,OAAV,CAAf,CAL2C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOzD,GAtBW;AAuBZG,EAAAA,oBAvBY,uCAuBgC;AAAA,QAArBC,OAAqB,SAArBA,OAAqB;AAAA,QAAZC,QAAY,SAAZA,QAAY;AACxCD,IAAAA,OAAO,CAACE,QAAR,CAAiBC,YAAjB,CAA8BC,OAA9B,CAAsC,UAAAC,IAAI,EAAI;AAC1C,UAAIA,IAAI,CAACP,SAAL,IAAkB,CAAtB,EAAyB;AACrBG,QAAAA,QAAQ,CAAC,gBAAD,EAAkBI,IAAI,CAACZ,KAAvB,CAAR;AACH;;AACDY,MAAAA,IAAI,CAACP,SAAL;AACH,KALD;AAMH;AA9BW,CAAhB;AAiCA,IAAME,OAAO,GAAG;AACZE,EAAAA,QADY,oBACHpB,KADG,EACI;AACZ,WAAOA,KAAK,CAACC,QAAN,CAAe,CAAf,KAAmB,EAA1B;AACH;AAHW,CAAhB;AAKA,eAAe;AACXD,EAAAA,KAAK,EAALA,KADW;AACJE,EAAAA,SAAS,EAATA,SADI;AACOE,EAAAA,OAAO,EAAPA,OADP;AACgBc,EAAAA,OAAO,EAAPA;AADhB,CAAf","sourcesContent":["import { reqCartList,reqDeleteCartById,reqUpdateCheckedById } from \"@/api\"\r\nconst state = {\r\n    cartList:[]\r\n}\r\nconst mutations = {\r\n    GETCARTLIST(state, cartList) {\r\n        state.cartList=cartList\r\n   }\r\n}\r\nconst actions = {\r\n    async getCartList({ commit }) {\r\n        let result = await reqCartList()\r\n        if (result.code == 200) {\r\n            commit('GETCARTLIST',result.data)\r\n        }\r\n    },\r\n    async deleteCartList({ commit }, skuId) {\r\n        let result = await reqDeleteCartById(skuId)\r\n        if (result.code == 200) {\r\n            return 'ok'\r\n        } else {\r\n            return Promise.reject(new Error('faile'))\r\n        }\r\n    },\r\n    async updateCheckedById({ commit }, { skuId, isChecked }) {\r\n        let result = await reqUpdateCheckedById(skuId, isChecked)\r\n        if (result.code == 200) {\r\n            return 'ok'\r\n        } else {\r\n            return Promise.reject(new Error('faile'))\r\n        }\r\n    },\r\n    deleteAllCheckedCart({ getters, dispatch }) {\r\n        getters.cartInfo.cartInfoList.forEach(cart => {\r\n            if (cart.isChecked == 1) {\r\n                dispatch('deleteCartList',cart.skuId)\r\n            }\r\n            cart.isChecked\r\n        });\r\n    }\r\n\r\n}\r\nconst getters = {\r\n    cartInfo(state) {\r\n        return state.cartList[0]||{}\r\n    }\r\n}\r\nexport default {\r\n    state, mutations, actions, getters\r\n}"]},"metadata":{},"sourceType":"module"}