{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { reqCartList, reqDeleteCartById, reqUpdateCheckedById } from \"@/api\";\nconst state = {\n  cartList: []\n};\nconst mutations = {\n  GETCARTLIST(state, cartList) {\n    state.cartList = cartList;\n  }\n\n};\nconst actions = {\n  async getCartList({\n    commit\n  }) {\n    let result = await reqCartList();\n\n    if (result.code == 200) {\n      commit('GETCARTLIST', result.data);\n    }\n  },\n\n  async deleteCartList({\n    commit\n  }, skuId) {\n    let result = await reqDeleteCartById(skuId);\n\n    if (result.code == 200) {\n      return 'ok';\n    } else {\n      return Promise.reject(new Error('faile'));\n    }\n  },\n\n  async updateCheckedById({\n    commit\n  }, {\n    skuId,\n    isChecked\n  }) {\n    let result = await reqUpdateCheckedById(skuId, isChecked);\n\n    if (result.code == 200) {\n      return 'ok';\n    } else {\n      return Promise.reject(new Error('faile'));\n    }\n  },\n\n  deleteAllCheckedCart({\n    getters,\n    dispatch\n  }) {\n    let PromiseAll = [];\n    getters.cartInfo.cartInfoList.forEach(cart => {\n      let Promise = cart.isChecked == 1 ? dispatch('deleteCartList', cart.skuId) : '';\n      PromiseAll.push(Promise);\n    });\n    return Promise.all(PromiseAll);\n  },\n\n  undateAllCartIsChecked({\n    state,\n    dispatch\n  }, isChecked) {\n    let PromiseAll = [];\n    state.cartList[0].cartInfoList.forEach(item => {\n      let result = dispatch('updateCheckedById', {\n        skuId: item.skuId,\n        isChecked\n      });\n      PromiseAll.push(result);\n    });\n    return Promise.all(PromiseAll);\n  }\n\n};\nconst getters = {\n  cartInfo(state) {\n    return state.cartList[0] || {};\n  }\n\n};\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":null,"metadata":{},"sourceType":"module"}